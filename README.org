#+TITLE: My Emacs configuration
#+DATE: 2021-06-04
#+LANGUAGE: en


* Background

In the early 1990s I was introduced to Emacs. Since then, I tend to bounce between Emacs and other editors (VS Code, Sublime, ...). But currently I am on an Emacs-streak of 5+ years.

When I use Emacs I tend to grow my config until it feels too big. And then I start over. So, here it is. Iâ€™ll be working with this for a while.

** Considerations

I use Emacs mostly professionally, mostly for coding (JS, Python, C/C++) projects (org-mode).

With this configuration, I try to stick to the following guidelines:
1. stick to vanilla Emacs as much as possible
2. only add a package when it actually adds value
3. resist the urge to tinker

Ad 1: This means I try to learn vanilla key binding, so no UAC for example. I use a built-in theme.

Ad 2: This means I stay away from eye-candy, unless it improves usability. Also, I do not add a package just because it is clever of hip.

Ad 3: And failing miserably. Because what would be the fun in that?

Reminder: Start =emacs --debug-init= to debug initialization and =emacs -Q= to skip initialization.

*** Literate configuration

[[http://cleancoder.com/products][Uncle Bob]] [[https://www.goodreads.com/quotes/835238-indeed-the-ratio-of-time-spent-reading-versus-writing-is][teaches]] we spend far more time reading source code than writing it. Hence, it makes sense to optimize for the former, but in reality it seems we don't. Coders are cranking out code as fast as they can type, without regard to readability for others (and their future self). I know I am prone to doing just that.

Instead we could endeavor to make code as readable as possible, and literate programming can help with that. In this specific case, embedding my configuration in an org file allows me to remind me of the effects of certain settings and record the choices that lead up to them.

On the other hand, comments are overrated. If an identifier is sufficiently explained by its name, I do not need a comment. A term that can be found in the manual or can easily be Googled does not need to be explained. To facilitate this and avoid unnecessary searching, I include links to documentation whenever possible.

Some other examples of literate configurations:
- [[https://github.com/novoid/dot-emacs/blob/master/config.org][Karl Voit]]
- [[https://github.com/mwfogleman/.emacs.d][Tasshin Fogleman]]
- [[https://github.com/geolessel/dotfiles/tree/master/emacs/emacs.d][Geoffrey Lessel]]
- [[https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org][Harry R. Schwartz]]

*** Essentials

I would not want to do without:
1. [[Bootstrap][use-package]]
2. [[Org-mode]]
3. [[Language server protocol][lsp-mode]]
4. [[Version control][Magit]]

*** Limitations

At this point I have decided to keep a number of applications separate from Emacs:
- browse in Chrome
- email in GMail (in Chrome)
- shell (=zsh=) in a terminal

*** Dilemmas

Do I place [[Key bindings][key bindings]] together in a central location, or do I put them with other related settings? The former gives a good overview of all key bindings, while the latter groups related settings. Either is fine (or equally uncomfortable) with me, as long as it is applied consistently.

The same goes for [[Customization][customizations]].

In both cases I choose a central location.

** History

- 2021 :: Moved to literate config file (embedded in org-file)

- 2020 :: Back with a fresh start.
- 2019 :: Trying to go back to (mostly) vanilla Emacs, with minimal config.
- 2018 :: Back to a custom config, using [[https://github.com/jwiegley/use-package][use-package]].
- 2017 :: I decided to give Prelude a go. This is the contents of my ~personal~ directory.

  After some initial misgivings (mainly due to having to relearn Prelude key strokes vs custom ones) I find that my Prelude customization is much smaller than my vanilla Emacs one.

** Convention

Names of functions and variables that I added are preceded by "/steets//".

* Where are we?

I run Emacs on different systems and platforms. And I like this config to work out of the box on all of them. So:
- I sync my org files through Dropbox
- we need to set some platform-dependent paths

#+BEGIN_SRC emacs-lisp
  (setq steets/org-dir (cond ((eq system-type 'gnu/linux) "~/Dropbox/org/")
                             ((eq system-type 'windows-nt) "S:/org/" "")
                             ((eq system-type 'cygwin) "/cygdrive/s/org/" "")))

  (defun steets/org-path (path)
    "Return a path to an org file"
    (concat steets/org-dir path))
#+END_SRC

* Customization

I prefer to use the customize interface whenever possible and store customizations in a separate [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][file]]:

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (if (file-exists-p custom-file) (load custom-file))
#+END_SRC

I am aware that this means that I can't keep customizations with their packages. It's just one of those [[Dilemmas][dilemmas]].

The main disadvantage of this choice is that comments in the =custom-set-variables= statement are lost when =customize= updates it. But documentation for each variable can be accessed through =C-h f=.

* Packages

** Bootstrap

I use [[https://github.com/jwiegley/use-package][use-package]] package configuration with [[https://github.com/raxod502/straight.el][straight]] package manager:

#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)

  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

Straight does not automatically update packages. I like this, because it make Emacs start up faster. To update manually, run =(straight-pull-all)=.

Replace =use-package= macro with =straight-use-package=:

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC

Reminder:
- Use the =:init= keyword to execute code /before/ a package is loaded.
- =:config= can be used to execute code /after/ a package is loaded.

The line below is needed to get LSP right:

#+BEGIN_SRC emacs-lisp
  (straight-pull-package 'melpa)
#+END_SRC

** Usability

Get some pretty [[https://github.com/domtronn/all-the-icons.el][icons]] that are needed by several other packages:

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

[[https://company-mode.github.io/][COMPlete ANYthing]]

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config (global-company-mode))
#+END_SRC

Add a [[https://github.com/seagle0128/doom-modeline][pretty mode line]]:

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-unicode-fallback t))
#+END_SRC

Keep the mode line clean by hiding minor-modes with [[https://github.com/emacsmirror/diminish][diminish]] (used by [[Bootstrap][use-package]]):

#+BEGIN_SRC emacs-lisp
  (use-package diminish)
#+END_SRC

Help to learn key bindings by [[https://github.com/justbur/emacs-which-key][suggesting keys]]:

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

** Development

*** Language server protocol

Use [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] for support of programming languages ([[https://langserver.org/][LSP]]):

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init (setq lsp-keymap-prefix "C-c h") ;; alternatives - "C-l", "C-c l"
    :hook ((python-mode . lsp)
           (bash-mode . lsp)
           (dockerfile-mode . lsp)
           (c-mode . lsp)
           (c++-mode . lsp)
           (js-mode . lsp)
           (json-mode . lsp)
           (typescript-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
#+END_SRC

Manage [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][UI elements]] of lsp-mode:

#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-position 'at-point
          lsp-ui-doc-show-with-cursor nil
          lsp-lens-enable nil
          lsp-ui-flycheck-enable t))
#+END_SRC

LSP needs some help for Python:

#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                           (require 'lsp-python-ms)
                           (lsp)))
    :config
    (setq lsp-python-ms-executable
          "~/.local/share/virtualenvs/.emacs.d-Qr0izAws/bin/pylsp"))
#+END_SRC

*** Version control

[[https://magit.vc/][Magit]]

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC

*** Docker

I always have several projects running at the same time. Often, these projects use very different development chains and deployment environments. [[https://docs.docker.com/][Docker]] makes this work flow a breeze and can be [[https://github.com/Silex/docker.el][managed]] from Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package docker)
#+END_SRC

Start with =C-c D= (capital).
See also the [[Language modes]] below.

*** Language modes

Add modes that Emacs doesn't support out of the box.

#+BEGIN_SRC emacs-lisp
  (use-package gherkin-mode)

  (use-package jinja2-mode
    :mode ("\\.mustache$" "\\.djhtml$" "\\.jinja2$" ))

  (use-package markdown-mode
    :mode (("\\.markdown\\'" . markdown-mode)
           ("\\.md\\'" . markdown-mode)))

  (use-package docker-compose-mode)
  (use-package dockerfile-mode
    :mode "^Dockerfile$")
#+END_SRC

** Text processing

On the fly [[http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html][spell checking]] for text modes and code comments:

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :init
    (setq ispell-program-name "aspell"
          ispell-list-command "--list")
    :hook
    ((prog-mode-hook . flyspell-prog-mode)
     (text-mode-hook . flyspell-mode))
    :config
    ;; fix mouse
    (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
    (define-key flyspell-mouse-map [mouse-3] #'undefined))
#+END_SRC

[[https://github.com/bnbeckwith/writegood-mode][Writegood]] to find common writing problems:

#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
    :commands writegood-mode
    :diminish writegood-mode
    :hook (text-mode-hook org-mode-hook))
#+END_SRC

** Org-mode

[[https://orgmode.org/manual/][Manual]]

#+BEGIN_SRC emacs-lisp
  (use-package org
    :requires htmlize
    :hook
    ((org-mode-hook . org-indent-mode)
     (org-mode-hook .
          (lambda ()
            ;; file modification date
            (set (make-local-variable 'time-stamp-format) "%:y-%02m-%02d")
            (set (make-local-variable 'time-stamp-start) "^#\\+DATE: +")
            (set (make-local-variable 'time-stamp-end) "$")

            ;; Switch language for Org file, if a `#+LANGUAGE:' meta-tag is on top 14 lines.
            (save-excursion
              (goto-line 15)
              (if (re-search-backward "#\\+LANGUAGE: +\\([A-Za-z_]*\\)" 1 t)
                  (ispell-change-dictionary (match-string 1))))))
     )
    :config
    (org-clock-persistence-insinuate)

    (setq org-agenda-custom-commands
          '(("h" "TODOs history of closed tasks"
             todo "DONE|CANCELLED|DEFERRED"
             ((org-agenda-log-mode-items '(clock state))
              (org-agenda-sorting-strategy '(timestamp-down))))
            ("o" "Open TODOs"
             todo "TODO|NEXT|ACTIVE"
             ((org-agenda-log-mode-items '(clock state))
              (org-agenda-sorting-strategy '(priority-down todo-state-down timestamp-down))))
            ("p" "Review previous month"
             agenda ""
             ((org-agenda-span 'month)
              (org-agenda-start-day "-1m")
              (org-agenda-start-with-log-mode t)
              (org-agenda-log-mode-items '(clock state))
              (org-agenda-archives-mode t) ; include archive files
              ))
            ("l" "TODOs for later"
             todo "SOMEDAY"
             ((org-agenda-sorting-strategy '(todo-state-up priority-down)))))
          org-capture-templates
          `(("b" "blog" entry (file "~/src/dwim/posts/index.org") "* DRAFT %?\n%a"
             :prepend t
             :emtpy-lines 1
             :unnarrowed t)
            ("h" "habit" entry (file org-default-notes-file) "* NEXT %?\n%U\n%a
  SCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")
  :PROPERTIES:
  :STYLE: habit
  :REPEAT_TO_STATE: NEXT
  :END:
  ")
            ("j" "journal" entry (file+olp+datetree org-default-notes-file "Journal") "")
            ;; ("z" "zettelkasten" entry (file+olp+datetree org-default-notes-file "Zettelkasten") "")
            ("m" "meeting" entry (file org-default-notes-file) "* %U: %?               :meeting:\nWith:\n\n")
            ("n" "note" entry (file+headline org-default-notes-file "Personal Knowledge Base") "* %?\n%U\n%a"
             :prepend t
             :emtpy-lines 1
             :unnarrowed t)
            ("t" "todo" entry (file+headline org-default-notes-file "Work") "* TODO %?\n%U\n%a"
             :prepend t
             :emtpy-lines 1
             :unnarrowed t)
            ("w" "writing" entry (file "~/src/fiction/process.org") "* %?\n%a"
             :prepend t
             :emtpy-lines 1
             :unnarrowed t)
            ))
    :bind (("\C-c a" . org-agenda)
           ("\C-c c" . org-capture)
           ("\C-c l" . org-store-link)))
#+END_SRC

Use [[https://www.emacswiki.org/emacs/AutoInsertMode][autoinsert]] to start a new org file with some basic content:

#+BEGIN_SRC emacs-lisp
  (use-package autoinsert
    :hook (find-file-hook . auto-insert)
    :config
    (setq auto-insert-query nil)
    (auto-insert-mode 1)
    (setq auto-insert-alist nil) ;; remove this to restore defaults
    (define-auto-insert '(org-mode . "org-mode file")
      '("org-mode header"
        "#+TITLE: " (file-name-base (buffer-file-name)) \n
        "#+DATE: " (format-time-string "%Y-%m-%d") \n
        "#+LANGUAGE: nl" \n
        \n
        )))
#+END_SRC

[[https://www.orgroam.com/manual.html][Zettelkasten]] in Org:

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :after org
    :config
    (setq org-roam-db-update-method 'immediate)
    :hook
    ((org-mode . org-roam-mode))  ;; could also be from after-init-hook
    :custom
    (org-roam-directory (steets/org-path "roam"))
    (org-roam-capture-templates
     '(("d" "default" plain (function org-roam--capture-get-point)
        "%?"
        :file-name "%<%Y-%m-%d-%H%M%S>-${slug}"
        :head "#+ROAM_TAGS: \n#+ROAM_ALIAS: \n"
        :unnarrowed t)))
    )
#+END_SRC

Use [[https://www.orgroam.com/manual.html#Full_002dtext-search-interface-with-Deft][deft]] to search Zettels:

#+BEGIN_SRC emacs-lisp
  (use-package deft
    :after org-roam
    :config (setq deft-directory org-roam-directory
                  deft-extensions '("md" "org")
                  deft-default-extension "org"))
#+END_SRC

* Functions

#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)


  (defun steets/read-file (filePath)
    "Return FILEPATH's file content."
    (with-temp-buffer
      (insert-file-contents filePath)
      (buffer-string)))


  (defun steets/find-regexp (regexp)
    "Return first occurrence of REGEXP in current buffer."
    (goto-char (point-min))
    (search-forward-regexp regexp)
    (match-string 1))


  (defun steets/word-frequency ()
    "Return a hash with word frequencies from current buffer."
    (interactive)
    (let ((table (make-hash-table :test 'equal :size 128)))
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "\\<[[:word:]]+\\>" nil t)
          (let ((word (downcase (match-string 0))))
            (message word)
            (puthash word (1+ (gethash word table 0)) table))
          ))
      (maphash (lambda (key val)
                 (message (format "%s: %d" key val)))
               table)))


  (defun steets/path-join (root &rest dirs)
    "like Python's os.path.join"
    (if (not dirs) root
      (apply 'steets/path-join
             (expand-file-name (car dirs) root)
             (cdr dirs))))


  (defun steets/find-file(directory)
    "Find a file in DIRECTORY"
    (interactive)
    (find-file (read-file-name "Find file: " directory)))


  (defun steets/god-mode-line ()
    "Change mode line in God mode "
    (cond (god-local-mode
           (progn
             (set-face-background 'mode-line "tomato")
             (set-face-background 'mode-line-inactive "firebrick")))
          (t (progn
               (set-face-background 'mode-line steets/mode-line-background)
               (set-face-background 'mode-line-inactive steets/mode-line-background-inactive)))))


  (defun steets/org-show-just-me (&rest _)
    "Fold all other trees, then show entire current subtree."
    (interactive)
    (org-overview)
    (org-reveal)
    (org-show-subtree))


  (defun steets/switch-to-minibuffer ()
    "switch to minibuffer window (if active)"
    (interactive)
    (when (active-minibuffer-window)
      (select-frame-set-input-focus (window-frame (active-minibuffer-window)))
      (select-window (active-minibuffer-window))))
#+END_SRC

* Key bindings

I like to keep all my key bindings in one place. This means I cannot keep them with related configuration, but that's just one of the [[Dilemmas][dilemmas]].

** User keys

The accepted convention is to use =C-c <letter>= (=mode-specific-map=) for user key bindings.

*** Keymaps

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Keymaps.html][Keymaps]] provide an elegant way of grouping related key bindings.

**** Files

I used a keymap to visit files I open often, but realized this is duplicating [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmarks]]:
Keymap =C-x r= with =m= to make a bookmark, =b= to open it, and =l= to list them.

**** Toggle

Toggle modes, inspired by [[http://endlessparentheses.com/the-toggle-map-and-wizardry.html][endless]]: "The manual recommends =C-c= for user keys, but =C-x t= is always free, whereas =C-c t= is used by some modes."

#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'steets/toggle-map)
  (define-key mode-specific-map "t" 'steets/toggle-map)

  (define-key steets/toggle-map "e" 'toggle-debug-on-error)
  (define-key steets/toggle-map "f" 'format-all-buffer)
  (define-key steets/toggle-map "r" 'dired-toggle-read-only)
  (define-key steets/toggle-map "s" 'flyspell-mode)
  (define-key steets/toggle-map "w" 'whitespace-mode)
#+END_SRC

**** Launch

Launch applications, inspired by [[http://endlessparentheses.com/launcher-keymap-for-standalone-features.html][endless]].

#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'steets/launcher-map)
  (define-key mode-specific-map "l" 'steets/launcher-map)

  (define-key steets/launcher-map "c" 'calc)
  (define-key steets/launcher-map "D" 'docker)
  (define-key steets/launcher-map "d" 'ediff-buffers)
  (define-key steets/launcher-map "f" 'find-dired)
  (define-key steets/launcher-map "g" 'grep)
  (define-key steets/launcher-map "h" 'man)
  (define-key steets/launcher-map "l" 'package-list-packages)
  (define-key steets/launcher-map "m" 'compile)
  (define-key steets/launcher-map "s" 'flyspell-buffer)
  (define-key steets/launcher-map "t" 'ansi-term)
#+END_SRC

**** Org-mode

#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'steets/org-map)
  (define-key mode-specific-map "o" 'steets/org-map)

  (define-key steets/org-map "c" 'steets/org-show-just-me) ;; center
  (define-key steets/org-map "d" 'deft)
  (define-key steets/org-map "e" 'org-entities-help)
  (define-key steets/org-map "f" (lambda ()
                                   (interactive)
                                   (steets/find-file org-directory)))
  (define-key steets/org-map "j" 'org-clock-goto)
  (define-key steets/org-map "l" 'org-insert-link)
  (define-key steets/org-map "n" (lambda ()
                                   (interactive)
                                   (find-file (steets/org-path "notes.org"))))
#+END_SRC

**** Zettelkasten

#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'steets/zettel-map)
  (define-key mode-specific-map "z" 'steets/zettel-map)

  (define-key steets/zettel-map "/" 'deft)
  (define-key steets/zettel-map "b" 'org-roam-switch-to-buffer)
  (define-key steets/zettel-map "c" 'org-roam-capture)
  (define-key steets/zettel-map "d" 'org-roam-find-directory)
  (define-key steets/zettel-map "f" 'org-roam-find-file)
  (define-key steets/zettel-map "h" 'org-roam-find-index)
  (define-key steets/zettel-map "i" 'org-roam-insert)
  (define-key steets/zettel-map "t" 'org-roam-buffer-toggle-display)
#+END_SRC

*** Others

#+BEGIN_SRC emacs-lisp
  (define-key mode-specific-map "b" 'eval-buffer)
  (define-key mode-specific-map "c" 'customize-variable)
  (define-key mode-specific-map "d"  ; duplicate line
                  (lambda () (interactive)
                    (save-excursion
                      (let ((kill-read-only-ok t) deactivate-mark)
                        (read-only-mode 1) (kill-whole-line) (read-only-mode 0) (yank)))))
  ;; (define-key mode-specific-map "h" RESERVED FOR LSP
  (define-key mode-specific-map "j" (lambda () (interactive) (join-line -1)))
  (define-key mode-specific-map "m" 'steets/switch-to-minibuffer)
  (define-key mode-specific-map "s" 'sort-lines)
  (define-key mode-specific-map "S" 'window-swap-states)
  (define-key mode-specific-map "u"  ;; dos2unix
                  (lambda() (interactive)
                    (revert-buffer-with-coding-system 'unix t)
                    (save-excursion
                      (goto-char (point-min))
                      (while (search-forward "" nil t) (replace-match "")))))
  (define-key mode-specific-map "v" 'insert-char)
  (define-key mode-specific-map "w" 'count-words)
#+END_SRC

** Overrides

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-<tab>") 'next-buffer)
  (global-set-key (kbd "C-S-<iso-lefttab>") 'previous-buffer)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-/") 'comment-line)
  (global-set-key (kbd "M-<up>")  ; move line up
                  (lambda () (interactive)
                    (transpose-lines 1) (forward-line -2) (indent-according-to-mode)))
  (global-set-key (kbd "M-<down>")  ; move line down
                  (lambda () (interactive)
                    (forward-line 1) (transpose-lines 1) (forward-line -1)
                    (indent-according-to-mode)))

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
  (global-set-key (kbd "C-z") 'undo) ; Emacs default is bound to hide Emacs.
#+END_SRC

* Hooks

General hooks that are not related to packages:

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
  (add-hook 'text-mode-hook 'visual-line-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'outline-minor-mode)
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

* Final tweaks

#+BEGIN_SRC emacs-lisp
  (display-time)

  (setq system-time-locale "C")

  (set-language-environment "UTF-8")

  (fset 'yes-or-no-p 'y-or-n-p)

  (put 'narrow-to-region 'disabled nil)

  (put 'dired-find-alternate-file 'disabled nil)

  (find-file (steets/org-path "notes.org"))
#+END_SRC

* Sandbox

Space to try out new stuff.

[[https://github.com/emacsorphanage/git-gutter][git-gutter]] to show changes in the fringe:

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :config (global-git-gutter-mode))
#+END_SRC

[[https://github.com/lassik/emacs-format-all-the-code][format-all]] for standard formatting when saving source code. See also =astylerc=.

#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :hook
    ((prog-mode-hook . format-all-mode)
     (format-all-mode-hook . format-all-ensure-formatter)))
#+END_SRC

[[https://github.com/creichert/ido-vertical-mode.el][ido-vertical-mode]] to make [[https://www.gnu.org/software/emacs/manual/html_mono/ido.html][IDO]] more to my taste:

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ido-vertical-mode
    :init
    (ido-mode 1)
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right))
#+END_SRC

I like my current line to be visible, including syntax highlighting:

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'hl-line nil :inherit nil :background "grey25")
#+END_SRC

* Wishlist

[[https://github.com/emacs-tw/awesome-emacs][Stuff to try]]:

- https://github.com/jwiegley/emacs-async
- https://github.com/magnars/multiple-cursors.el
- https://github.com/realgud
- https://gitlab.com/jabranham/system-packages provides basic access to system package manager, but no gui
- https://github.com/pashky/restclient.el

* Graveyard
:PROPERTIES:
:header-args: :tangle no
:END:

Rejected configuration (will not be [[https://orgmode.org/manual/Extracting-Source-Code.html][tangled]]):

- Could not get to work:
  - [[https://github.com/dgutov/diff-hl][diff-hl]] (Git-gutter does work).
  - https://github.com/sheijk/hideshowvis
  - [[https://github.com/tarsius/keycast][keycast]] does not [[https://github.com/seagle0128/doom-modeline/issues/122][work]] well with doom-modeline
- minibuffer completion
  - https://github.com/minad/vertico
  - https://github.com/raxod502/selectrum#selectrum-in-comparison-to-other-completion-systems
- https://github.com/atykhonov/google-translate

#+BEGIN_SRC emacs-lisp
  ;; The Uncompromising Python Code Formatter
  ;; https://github.com/psf/black
  (use-package blacken
    :config
    :hook (python-mode-hook . blacken-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "<return>") 'dired-find-alternate-file))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package apt-utils
    :straight (apt-utils
               :type git
               :host github
               :repo "emacsmirror/emacswiki.org"
               :branch "master"
               :files ("apt-utils.el")))
#+END_SRC
